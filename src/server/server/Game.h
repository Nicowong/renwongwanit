// Generated by dia2code
#ifndef SERVER__GAME__H
#define SERVER__GAME__H

#include <map>
#include <memory>
#include <thread>
#include <stdlib.h>

namespace engine {
  class Engine;
};
namespace server {
  class Player;
}

#include "Player.h"
#include "engine/Engine.h"

namespace server {

  /// class Game - 
  class Game {
    // Associations
    // Attributes
  private:
    std::map<int, std::unique_ptr<Player>> players;
    engine::Engine& engine;
    std::unique_ptr<std::thread> engineThread;
  protected:
    size_t maxP     = 2;
    // Operations
  public:
    Game ();
    Game (int n, bool fill = false);
    Player& player (int id);
    engine::Engine& getEngine ();
    const std::map<int, std::unique_ptr<Player>>& getPlayers () const;
    int addPlayer (std::unique_ptr<Player> player);
    void removePlayer (int id);
    void setPlayer (std::unique_ptr<Player> player, int id);
    // Setters and Getters
    const size_t& getMaxP() const;
    void setMaxP(const size_t& maxP);
  };

};

#endif
