// Generated by dia2code
#ifndef STATE__ELEMENTTAB__H
#define STATE__ELEMENTTAB__H

#include <stdlib.h>
#include <vector>

namespace state {
  class Element;
}

#include "Element.h"

namespace state {

  /// class ElementTab - 
  class ElementTab {
    // Associations
    // Attributes
  protected:
    size_t w;
    size_t h;
    std::vector<Element*> elemList;
    std::vector<Element*> elemTab;
    // Operations
  public:
    ElementTab ();
    ElementTab (size_t w, size_t h);
    size_t getTabIndex (const Element* elem) const;
    size_t getTabIndex (size_t x, size_t y) const;
    void addElem (Element* elem);
    const Element* getElem (size_t i) const;
    Element* getElem (size_t i);
    const Element* operator[] (size_t i) const;
    Element* operator[] (size_t i);
    const Element* getElem (size_t x, size_t y) const;
    Element* getElem (size_t x, size_t y);
    Element* eraseElem (int i);
    Element* eraseElem (size_t x, size_t y);
    void moveElem (size_t x1, size_t y1, size_t x2, size_t y2);
    void debug () const;
    void resize (size_t w, size_t h);
    // Setters and Getters
    const size_t& getW() const;
    void setW(const size_t& w);
    const size_t& getH() const;
    void setH(const size_t& h);
    const std::vector<Element*>& getElemList() const;
    void setElemList(const std::vector<Element*>& elemList);
    const std::vector<Element*>& getElemTab() const;
    void setElemTab(const std::vector<Element*>& elemTab);
  };

};

#endif
