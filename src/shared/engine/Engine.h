// Generated by dia2code
#ifndef ENGINE__ENGINE__H
#define ENGINE__ENGINE__H

#include <mutex>
#include <vector>

namespace state {
  class State;
};
namespace engine {
  class Command;
  class AntiCommand;
}

#include "EngineStatus.h"
#include "AntiCommand.h"
#include "Command.h"

namespace engine {

  /// class Engine - 
  class Engine {
    // Associations
    // Attributes
  private:
    mutable std::mutex engineMutex;
    volatile EngineStatus engStatus     = PAUSE;
  protected:
    state::State& currentState;
    std::vector<Command*> currentCommands;
    bool record     = true;
    std::vector<AntiCommand*> antiCommands;
    // Operations
  public:
    Engine (state::State& state, bool rec = false);
    ~Engine ();
    const state::State& getState () const;
    void addCommand (Command* cmd);
    void update ();
    void updateAll ();
    void debug () const;
    void rollback ();
    void rollbackAll ();
    void run ();
    void setStatus (EngineStatus flag);
    // Setters and Getters
    state::State& getCurrentState() const;
    void setCurrentState(const state::State&& currentState);
    const std::vector<Command*>& getCurrentCommands() const;
    void setCurrentCommands(const std::vector<Command*>& currentCommands);
    bool getRecord() const;
    void setRecord(bool record);
    const std::vector<AntiCommand*>& getAntiCommands() const;
    void setAntiCommands(const std::vector<AntiCommand*>& antiCommands);
  };

};

#endif
